---
title: "Workshop: Creating and Transforming Variables"
author: "Olga Mushakarara"
format: 
   html: 
      embed-resources: true
---

## Introduction

For this workshop, you'll be cleaning and modifying a dataset with functions like `drop()`, `rename()`, `to_numeric()`, and `replace()`. These have been covered in the last few weeks of the prework.

## Step 1: Load packages and data

To get started, **load in the needed packages**: `pandas`, `numpy`, and `plotly.express`.

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
```

Now, read in the dataset called `physical_activity.csv` from your data folder and save it as `pa`.

It should have 142 rows and 9 columns.

```{python}
# reading the physical_activity csv
pa = pd.read_csv("Data/physical_activity.csv")
pa
```

## Step 2: Subset and rename variables

Next, drop the "personal_id" and "household_id" variables from the DataFrame.

```{python}
# dropping the personal_id and household_id variables using drop: 

pa = pa.drop(columns = ["personal_id","household_id"])

pa

```

Now, rename `oms_recommendation` to `who_recommendation`. (OMS is the French name for WHO.)

```{python}
# renaming the  `oms_recommendation` to `who_recommendation`. (OMS is the French name for WHO.)

pa = pa.rename(columns={"oms_recommendation": "who_recommendation"})

pa 
```

Your data should now have 7 variables: 

- `sex`: male or female 
- `status`: adult (Adulte) or child (Enfant) 
- `bmi`: body mass index 
- `sedentary_ap_s_day`: sedentary behaviour (seconds/day) 
- `light_ap_s_day`: light physical activity (seconds/day) 
- `mvpa_s_day`: moderate to vigorous physical activity (seconds/day) 
- `who_recommendation`: whether or not WHO recommendations for physical activity are met

## Step 3: Examine and convert data types

Let's think about the types of variables in our dataset. 

Check the data types that were automatically assigned to each variable with `info()`.

```{python}
# your code here
pa.info()
```

Notice that all of your variables are of type **object** (which is a catch-all for strings), but some    should be **numeric** (e.g., `bmi`). 

This is because the numeric variables have the words "missing" in them to indicate that the value is missing. Can you spot those words when you view the dataset?

We'll use the `pd.to_numeric()` function to convert these variables to numeric. 

Here is an example of how to use this.

```{python}
test_df = pd.DataFrame({"bmi": ["32.2", "missing", "18.8", "17.8", "21.1"]})
test_df["bmi"] = pd.to_numeric(test_df["bmi"], errors="coerce")
test_df
```

The missing values are represented as `NaN` after the conversion.

Now, fill in the blanks below to apply this to your `pa` DataFrame.

```{python}
# Change variables' type
pa["bmi"] = pd.to_numeric(pa["bmi"], errors="coerce")
pa["sedentary_ap_s_day"] = pd.to_numeric(pa["sedentary_ap_s_day"], errors="coerce")
pa["light_ap_s_day"] = pd.to_numeric(pa["light_ap_s_day"], errors="coerce")
pa["mvpa_s_day"] = pd.to_numeric(pa["mvpa_s_day"], errors="coerce")
```

Check the data types again with `info()`.

## Step 4: Recode the `status` variable

Next, notice that the `status` variable currently uses the French terms "Adulte" and "Enfant". 

```{python}
# Run this code to check the values of status
pa["status"].value_counts()
```

Use the `.replace()` method to transform the `status` variable by replacing "Adulte" with "Adult" and "Enfant" with "Child".

```{python}
# changing the values Adulte -> Adult and Enfant -> Child 

pa["status"] = pa["status"].replace({"Adulte": "Adult", 
"Enfant": "Child"})

pa["status"].value_counts()
```

## Step 5: Convert the physical activity variables

There are 3 physical activity variables: sedentary behavior (`sedentary_ap_s_day`), light physical activity (`light_ap_s_day`), and moderate to vigorous physical activity (`mvpa_s_day`). 

These variables are currently measured in seconds per day.

However, most [recommendations](https://apps.who.int/iris/bitstream/handle/10665/337001/9789240014886-eng.pdf) for physical activity are in minutes per week, so we want to align with these measures. 

To do this, complete the following manipulations:

1. Use arithmetic operations to create new variables called `sedentary_ap_m_wk`, `light_ap_m_wk`, and `mvpa_m_wk` that are in minutes per week.

2. Remove the previous seconds per day variables.

```{python}
# Converting the secs/day to mins/ wk using :  (x/60)*7 

pa["sedentary_ap_m_wk"] = (pa["sedentary_ap_s_day"]/60) * 7 

pa["light_ap_m_wk"] = (pa["light_ap_s_day"]/60) * 7 

pa["mvpa_m_wk"] = (pa["mvpa_s_day"]/60) * 7 

pa

```

```{python}
# Dropping the s_day variables: 

pa = pa.drop(columns=["sedentary_ap_s_day", "light_ap_s_day", "mvpa_s_day"])

pa
```

 
## Step 6: Total physical activity

Create a new column that adds light physical activity and moderate to vigorous physical activity, and call it `total_pa_m_wk`. 

This should give us the total amount of activity in minutes per week. 

```{python}
# Adding "light_ap_m_wk" and mvpa_m_k 

pa["total_pa_m_wk"] = pa["light_ap_m_wk"] + pa["mvpa_m_wk"]	

pa
```

## Step 7: Categorical variable for total physical activity

Write a custom function that bins its input variable into three categories:

- `low`: less than 500 minutes per week (< 500)
- `medium`: between 500 and 1000 minutes per week (>= 500 and < 1000)
- `high`: greater than 1000 minutes per week (>= 1000)

Apply this function to the `pa` DataFrame to create a categorical variable called `total_pa_cat`

```{python}
# defining a ftn to return low, medium and high: 

def activity_cat (total_phy_activity): 
   if total_phy_activity < 500: 
      return "low"
   elif total_phy_activity >= 500 and total_phy_activity < 1000: 
      return "medium"
   elif total_phy_activity >= 1000: 
      return "high"
   else: 
      return "ungraded"


activity_cat_vec = np.vectorize(activity_cat)
```

```{python}
# creating a new variable total_pa_cat using the vectorized ftn : 

pa["total_pa_cat"] = activity_cat_vec(pa["total_pa_m_wk"])

pa 
```


## Step 8: Visualize data with plotly express

In this section you will use `pa` to generate some plots!

### Plot 1: Histogram

Histograms are best used to visualize the distribution of a single numeric (continuous) variable. Choose a variable from the dataset that you can plot a histogram with.

Using plotly express, create and print a histogram.

```{python}
# creating a histogram using the total activity per minute per week 

pa_plot = px.histogram(
   pa,
   x = "total_pa_m_wk", 
   labels= {"total_pa_m_wk": "Total Physical Activity per hr per week"}, 
   title = "Distibution of the total physical activity done by each respondent per hr per week")

pa_plot
```

- Moderate physical activity (400-700 hours per week) is the most common.
- Very high physical activity levels are rare but present.
- The distribution suggests that extreme physical activity levels are uncommon.

### Plot 2: Boxplot

Boxplots are best used to visualize the distribution of a numeric variable, split by the values of a discrete/categorical variable.

Use plotly express to create and print a boxplot.

Use the same variable used for your histogram on your y-axis, and plot it against a categorical variable on your x-axis.

Set fill color to match the values of your categorical variable.

```{python}
# creating a boxplot disaggregated by respondent's status: 

status_plot = px.box(pa, 
y = "total_pa_m_wk", 
x = "status", 
color = "status", 
title = "Distribution of the total weekly physical activity by respondent status")

status_plot
```

Write a short explanation of what you see in the plot.
- Adults generally have a higher median and more variable weekly physical activity compared to children.
- Children's activity levels are more consistent, but some outliers indicate highly active or inactive individuals.
- Both groups have extreme cases of individuals engaging in very high weekly physical activity.the adults. 

## Optional Challenge Question: Health Risk Classification

1. Write a function `assess_risk()` that:  
   - Returns `"High Risk"` if **BMI â‰¥ 30** and **total physical activity < 500 min/week**  
   - Otherwise, returns `"Not High Risk"`  

2. Create a new column `risk_category` in your `pa` DataFrame by applying this function.  

3. Make a percentage stacked bar chart showing the count of `"High Risk"` and `"Not High Risk"` individuals, grouped by `sex`. 

Comment on the findings. Which gender has a higher proportion of high risk individuals?


```{python}
# Creating a ftn that assess rick based on BMI and total physical activity: 

def assess_risk(bmi_score, total_pa): 
   if bmi_score >= 30 and total_pa < 500: 
      return "High Risk"
   else: 
      return "Not High Risk"

assess_risk_vec = np.vectorize(assess_risk)
```


```{python}
pa["risk_category"] = assess_risk_vec(pa["bmi"], pa["total_pa_m_wk"])

pa
```


```{python}
# stacked bar chart of the risk category by sex: 

risk_cat_plot = px.histogram(
   pa, 
   x = "risk_category", 
   color= "sex", 
   barnorm = "percent", 
   text_auto = ".1f"
)

risk_cat_plot
```

- In the Not High Risk group, males and females are nearly equally represented.
- In the High Risk group, females significantly outnumber males, making up nearly 73% of this category.
- This may indicate that females are more likely to be classified as high risk compared to males in this dataset.