# Imports 


```{python}

import pandas as pd 
import numpy as np 
import vega_datasets as vd

```

# Basics of a Function 


```{python}
def pounds_to_kg(pounds): 
    return pounds * 0.4536
```


```{python}
#pounds_to_kg(180)
pounds_to_kg(pounds=180)
```

# Similary...


```{python}
def pds_to_kg(pounds): 
    kg = pounds * 0.4536
    return kg
```


```{python}
pds_to_kg(160)
```

# Using the ftn inside a dataframe: 

```{python}

pounds_df = pd.DataFrame({"pounds": [150, 200, 250]})
pounds_df
```


```{python}
pounds_df["kg"] = pounds_to_kg(pounds_df["pounds"])

pounds_df
```

# Practice Qn 1:  Age in Months Function
Create a simple function called `years_to_months` that transforms age in years to age in months.

Use it on the `riots_df` DataFrame imported below to create a new column called `age_months`:

```{python}
riots_df = vd.data.la_riots()

riots_df
```

```{python}
# creating the years to months ftn: 

def years_to_months (age):
    return age * 12

```

```{python}
# creating a new column called 'age_months': 

riots_df["age_months"] = years_to_months(riots_df["age"])

riots_df
```

# Ftns with multiple arguments 


```{python}
def cal_calories(carb_grams, protein_grams, fat_grams): 
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return  result
```


```{python}
cal_calories(carb_grams = 50 ,protein_grams = 25,fat_grams = 15)
```


```{python}
# However gives an error when 1 argument is missing. 
# cal_calories(carb_grams = 50 ,protein_grams = 25) 

```

```{python}

# Defining default arguments.

def cal_calories_2 (carb_grams = 0, protein_grams = 0, fat_grams = 0): 
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return  result
```


```{python}
cal_calories_2(carb_grams = 50 )
```


```{python}
food_df = pd.DataFrame({
    "food": ["Apple", "Avocado"], 
    "carb": [25, 10],
    "protein": [0, 1], 
    "fat": [0, 14]
})

food_df
```


```{python}
cal_calories_2(carb_grams = food_df["carb"],
protein_grams = food_df["protein"],
fat_grams = food_df["fat"])

# OR 
food_df["calories"] = cal_calories_2(food_df["carb"],
food_df["protein"],
food_df["fat"])

food_df

```

# Practice Qn 2: BMI Function
Create a function named calc_bmi that calculates the Body Mass
 Index (BMI) for one or more individuals, 
 then apply the function by running the code chunk further below.

 The formula for BMI is weight (kg) divided by height (m) squared.

```{python}
def calc_bmi (weight = 0 , height = 0): 
    bmi = weight/height
    return bmi

```


```{python}
bmi_df = pd.DataFrame({
    'Weight': [70, 80, 100],  # in kg
    'Height': [1.7, 1.8, 1.2]  # in meters
})

bmi_df['BMI'] = calc_bmi(bmi_df['Weight'], bmi_df['Height'])

bmi_df
```

# Introduction to conditionals: if, else, elif 


```{python}
def class_num(num):
    if num > 0: 
        return "Positive"

class_num(5)
class_num(-2)
```


```{python}
def class_num(num):
    if num > 0: 
        return "Positive"
    elif num < 0 : 
        return " Negative"
    elif num == 0: 
        return "Zero"
    else: 
        return "Invalid"

print(class_num(5))

print(class_num(-5))

print(class_num(0))

print(class_num(np.nan))
```

# Using conditional ftns on a dataframe: 


```{python}
num_df = pd.DataFrame({'num': [10, -5, 0]})
num_df
```


```{python}
# This doesn't work as the ftn is not vectorized. 
#class_num(num_df["num"])
```


```{python}
# To vectorise the ftn u use the following: 
class_num_vec = np.vectorize(class_num)
```


```{python}
# then use the vectorized ftn in the df: 
num_df["category"] = class_num_vec(num_df["num"])

num_df
```

# Example using grades: 
If the grade is 85 or above, the category is ‘Excellent’.
If the grade is between 60 and 84, the category is ‘Pass’.
If the grade is below 60, the category is ‘Fail’.
If the grade is negative or invalid, return ‘Invalid grade’.


```{python}
def categorize_grade(grade):
    if grade >= 85:
        return 'Excellent'
    elif grade >= 60 and grade < 85:
        return 'Pass'
    elif grade >= 0 and grade < 60:
        return 'Fail'
    else:
        return 'Invalid grade'

categorize_grade(-5)  # Output: Excellent
```


```{python}
categorize_grade_vec = np.vectorize(categorize_grade)
```


```{python}
categorize_grade_vec([70,80,100])
```

# Practice Qn 3: Age Categorization Function
Writing a function that categorizes age into different life stages as
 described earlier. You should use the following criteria:

If the age is under 18, the category is ‘Minor’.
If the age is greater than or equal to 18 and less than 65, the category is ‘Adult’.
If the age is greater than or equal to 65, the category is ‘Senior’.
If the age is negative or invalid, return ‘Invalid age’.


```{python}
def age_cat (age):
    if age < 18: 
        return "Minor"
    elif age >= 18 and age < 65: 
        return "Adult"
    elif age >= 65: 
        return "Senior"
    else: 
        return "Invalid age"
```


```{python}
# running the riot_df 

riots_df = vd.data.la_riots()
riots_df

```


```{python}
# applying the age_cat to the riot_df["age"]

# first vectorize the ftn: 
age_cat_vec = np.vectorize(age_cat)

riots_df["Age_Category"] = age_cat_vec(riots_df["age"])

riots_df
```