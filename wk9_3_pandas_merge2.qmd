# Packages

```{python}
import pandas as pd
import country_converter as cc

``` 

## Data 


```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## One to Many joins: 


```{python}
people
```


```{python}
test_info_many
```


```{python}
# Joining the one to many datasets: 

pd.merge(
    people, 
    test_info_many
)
```

# Practice Q: Merging One-to-Many Crop Yields


```{python}
farm_info
```


```{python}
crop_yields
```


```{python}
pd.merge(
    farm_info, 
    crop_yields, 
    on = "farm_id"
)
```

## Multiple Key Columns 

```{python}
traffic_flow
```


```{python}
pollution_levels
```


```{python}
# Merging the datasets with 2 keys: 
pd.merge(
    traffic_flow, 
    pollution_levels, 
    on = ["street_name", "time_of_day"]
)
```

# Practice Q2: Calculate Oil Consumption per Capita
We have two datasets containing information about countries:

`oil_consumption`: Contains yearly oil consumption in tonnes
`tidyr_population`: Contains yearly population data

- Join these datasets using merge() with a left join. Since we want to match both country AND year, youâ€™ll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

- After joining, create a new column called consumption_per_capita that calculates the yearly oil consumption per person (in tonnes).

- Which country had the highest per capita oil consumption in 1995?

```{python}
oil_consumption.sort_values(by = ["country", 'year'])
```

```{python}
tidyr_population.sort_values(by = ["country", "year"])
```


```{python}
#merging the two datasets using the left join with the oil ds as the primary ds and using the key: country and year: 
oil_popn_df = pd.merge(
    oil_consumption, 
    tidyr_population, 
    on = (["country", "year"]), 
    how = "left"
)

oil_popn_df
```


```{python}
# Creating a new column that calculates the oil consumption per capita: 

oil_popn_df["consumption_per_capita"] = (oil_popn_df["oil_consump"]/oil_popn_df["population"]).round(2)

```


```{python}
#sorting the consumption per capita by year and highest consumption per capita: 


oil_popn_df.query("year == 1995").sort_values(by=["year","consumption_per_capita"], 
ascending = False)
```

## Singapore had the highest per capita oil consumption in 1995. 

# Key Mismatches: 
Where the columns u use for the keys are not the same. 

```{python}
people
```


```{python}
test_info_diff
```


```{python}
pd.merge(
    people, 
    test_info_diff
)

# the output does not have Alice and Charlie in the inner join as the Alice in the other ds is spelt as alice. 
```


```{python}
#fixing the alice -> Alice: 

test_info_diff["name"] = test_info_diff["name"].str.title()

test_info_diff
```


```{python}
pd.merge(
    people, 
    test_info_diff
)
# Still Charlie is still missing from the 2nd output. 
```


```{python}
# to check for white space in the values 
test_info_diff["name"].unique()

# Charlie has white space and is fixed as follows: 
test_info_diff["name"] = test_info_diff["name"].str.strip()

```


```{python}
pd.merge(
    people, 
    test_info_diff
)
```

# Practice Q3: Inner Join Countries
The following two datasets contain data for India, Indonesia, and the Philippines. However, an inner join of these datasets only returns 1 row.


```{python}
asia_countries
asia_population
```


```{python}
# merging the two ds: 

pd.merge(
    asia_countries,
    asia_population, 
    on = "Country"
)

# This merge is returning only India in the ds as indonesia is spelt without a capital I and Phillipines is spelt wrongly. 
```


```{python}
# Title capitalizing indonesia: 
asia_population["Country"] = asia_population["Country"].str.title()

asia_population
```

```{python}
# Correcting the Philipines spelling 

asia_population["Country"] = asia_population["Country"].replace({'Phillipines': 'Philippines'})

asia_population
```


```{python}
# trying the merge again: 
pd.merge(
    asia_countries,
    asia_population, 
    on = "Country"
)
```

## Key Mismatches: Oil Consumption Example: 


```{python}
oil_consumption

tidyr_population
```


```{python}
oil_pop = pd.merge(
    oil_consumption, 
    tidyr_population, 
    how = "left", 
    on = ["country", "year"]
).sort_values(["country", "year"])

oil_pop
```


```{python}
# finding the key values that are mismatched in a large dataset

oil_countries = set(oil_consumption["country"].unique())

pop_countries = set(tidyr_population["country"].unique())
```


```{python}
# to find the mismatched key values we substract the sets 
oil_countries - pop_countries

pop_countries - oil_countries
```

## Merging with Country Codes: 

```{python}
cc.convert("South Africa", to = "ISO3")

```

```{python}
oil_consumption["country_code"] = cc.convert(oil_consumption["country"], to = "ISO3")

tidyr_population["country_code"] = cc.convert(tidyr_population["country"], to = "ISO3")
```


```{python}
oil_consumption

tidyr_population
```

```{python}
oil_countries = set(oil_consumption["country_code"].unique())

pop_countries = set(tidyr_population["country_code"].unique())
```
 

 ```{python}
 oil_countries - pop_countries

 pop_countries - oil_countries
 ```


 ```{python}

 # Merging using the country_code instead of the country names: 
 oil_popn_df2 = pd.merge(
    oil_consumption, 
    tidyr_population, 
    on = (["country_code", "year"]), 
    how = "left"
)

oil_popn_df2.query("population.isna()")
 ```

# Practice Q4: Merging Oil Consumption with Geographic Data

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. 

```{python}
oil_2012

country_regions

```


```{python}
#Add the country_code in the oil_2012 dataset

oil_2012["country_code"] = cc.convert(oil_2012["country"], to = "ISO3")

oil_2012
```


```{python}
# Merging the two datasets using country_code as the key: 

oil_continent = pd.merge(
    oil_2012, 
    country_regions,
    on = "country_code", 
    how = "left"
)

oil_continent
```


```{python}
#Getting the highest oil consumption in each continent: 

max_oil_by_continent = oil_continent.loc[
    oil_continent.groupby('continent')['oil_consump'].idxmax()
]


max_oil_by_continent
```

