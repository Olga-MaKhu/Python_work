 ---
title: "Transforming Variables in Pandas"
author : "Olga Mushakarara"
format:
    html:
        embed-resources: true
---

# Learning Objectives: 
- Understand how to create new varaibles in a DataFrame.
- Learn how to modify existing variables.

# Imports 


```{python}
import pandas as pd 


pd.options.mode.copy_on_write = True
```


```{python}

counties = pd.read_csv("Data/us_counties_data.csv")

counties
```


```{python}
#creating a subset of from the df counties: 

area_df = counties[["county","area_sq_miles", "pop_20"]]

area_df
```

# Creating new Variables 


```{python}
# changing the varianle _miles to sq.kms for the area_sq_miles 

area_df["area_sq_miles"] * 2.59 # this only prints out the output but no change is made to the area_df

# So we create a new column in area_df: 

area_df["area_sq_km"] = area_df["area_sq_miles"] * 2.59

# Creating a new variable of sq_kms to area in hectares: 

area_df["area_hectares"] = area_df["area_sq_km"] * 100 

area_df

```

# Practice Q1: Area in Acres 
- Using the `area_df` dataset, create a new column called `area_acres` by multiplying the miles variable by 640.
- Store the result back into `area_df` and display the df

```{python}
# adding area in acres: 

area_df["area_acres"] = area_df["area_sq_miles"] * 640 

area_df
```

# Modifying existing Variables: 


```{python}
# rounding off the sq_km to 2 decimal places 

area_df["area_sq_km"] = area_df["area_sq_km"].round(2)

area_df
```

# Practice Q2: Rounding off Area in Acres to 1 dc
- Using the `area_df` dataset,round off the  `area_acres` to 1 d.c
- Store the result back into `area_df` and display the df

```{python}
area_df["area_acres"] = area_df["area_acres"].round(1)

area_df
```

# Calculating with Multiple Variables 


```{python}
# calculating the popn density per km of an area: 
 
area_df["pop_per_sqkm"] = (area_df["pop_20"]/area_df["area_sq_km"]).round(0)

# Sorting by highest(descending order)

area_df = area_df.sort_values(by = "pop_per_sqkm",
ascending = False)

area_df 

```

# Practice Q3: Calculate Foreign-Born Percentage
Use the counties dataset to calculate the percentage of foreign-born residents in each county. The variable foreign_born_num shows the number of foreign-born residents and pop_20 shows the total population. Sort the DataFrame in descending order of the percentage of foreign-born residents. Which two counties have the highest percentage of foreign-born residents?

```{python}
# Calculating the % of foreign_born resident in each county.

counties["percent_foreigners"] = ((counties["foreign_born_num"]/counties["pop_20"])*100).round(1)

# Sort by highest 

counties = counties.sort_values(by = "percent_foreigners",
ascending = False)

counties
```

# The counties with the highest % of foreigners is Miami-Dade in Florida and Queens, in New York.

# Creating a Boolean Variable 

```{python}
#creating a subset as follows: 
changes_df = counties[["county", "pop_change_2010_2020","pct_emp_change_2010_2021"]]

changes_df
```


```{python}
#Creating a boolean to indicate a positive change in population using the pop_change_2010_2020 variable: 

changes_df["pop_increase"] = changes_df["pop_change_2010_2020"] > 0 

changes_df["emp_increase"] = changes_df["pct_emp_change_2010_2021"] > 0 

changes_df
```

```{python}
# querying boolean variables: Counties where population increased but employment decreased

changes_df.query("pop_increase == True & emp_increase == False")

changes_df.query("pop_increase & -(emp_increase)")

```

# Practice Q4: Categorize Counties by Foreign-Born Population
In a previous practice question, we calculated the percentage of foreign-born residents in each county. Now, create a Boolean variable `foreign_born_pct_gt_30` that is True if the percentage is greater than 30%.

When youâ€™re done, query the DataFrame to show only counties where `foreign_born_pct_gt_30` is True. You should get 24 rows.                                                                                 


```{python}
# Creating a Boolean for a condition where percent_foreigners is >  30% 
counties["foreign_born_pct_gt_30"] = counties["percent_foreigners"] > 30

counties.query("foreign_born_pct_gt_30").shape

```

# Copy on Write Warning.

```{python}

pd.options.mode.copy_on_write = False 

counties_mini = counties[["county", "area_sq_miles"]]

counties_mini["area_sq_miles"] = counties_mini["area_sq_miles"].round(2)

# Is u get the ipython-input-26-430088d3447e>:5: SettingWithCopyWarning: 
##Try using .loc[row_indexer,col_indexer] = value instead
# Set the 
pd.options.mode.copy_on_write = True

counties_mini["area_sq_miles"] = counties_mini["area_sq_miles"].round(2)

counties_mini
```
