## Data and Packages: 


```{python}
import pandas as pd


# TB incidence in Africa
tb_2019_africa = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tb_incidence_2019.csv"
)

# Health expenditure data
health_exp_2019 = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/health_expend_per_cap_2019.csv"
)

# Highest expenditure countries
highest_exp = health_exp_2019.sort_values("expend_usd", ascending=False).head(70)

# TB cases in children
tb_cases_children = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tb_cases_children_2012.csv"
).dropna()

# Country continents data
country_continents = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continents.csv"
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

# Test information
test_info = pd.DataFrame(
    {
        "name": ["Alice", "Bob", "Charlie"],
        "test_date": ["2023-06-05", "2023-08-10", "2023-07-15"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

# Disordered test information
test_info_disordered = pd.DataFrame(
    {
        "name": ["Bob", "Alice", "Charlie"],  # Bob in first row
        "test_date": ["2023-08-10", "2023-06-05", "2023-07-15"],
        "result": ["Positive", "Negative", "Negative"],
    }
)

# Multiple test information
test_info_multiple = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Charlie"],
        "test_date": ["2023-06-05", "2023-06-06", "2023-08-10", "2023-07-15"],
        "result": ["Negative", "Negative", "Positive", "Negative"],
    }
)

# Test information with different name
test_info_different_name = pd.DataFrame(
    {
        "first_name": ["Alice", "Bob", "Charlie"],
        "test_date": ["2023-06-05", "2023-08-10", "2023-07-15"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

# Test information including Xavier
test_info_xavier = pd.DataFrame(
    {
        "name": ["Alice", "Bob", "Xavier"],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

# Students data
students = pd.DataFrame(
    {"student_id": [1, 2, 3], "name": ["Alice", "Bob", "Charlie"], "age": [20, 22, 21]}
)

# Exam dates data
exam_dates = pd.DataFrame(
    {"student_id": [1, 3], "exam_date": ["2023-05-20", "2023-05-22"]}
)

# Employee details
employee_details = pd.DataFrame(
    {
        "id_number": ["E001", "E002", "E003"],
        "full_name": ["Emily", "Frank", "Grace"],
        "department": ["HR", "IT", "Marketing"],
    }
)

# Performance reviews
performance_reviews = pd.DataFrame(
    {
        "employee_code": ["E001", "E002", "E003"],
        "review_type": ["Annual", "Mid-year", "Annual"],
        "review_date": ["2022-05-10", "2023-09-01", "2021-12-15"],
    }
)

# Sales data
sales_data = pd.DataFrame(
    {
        "salesperson_id": [1, 4, 8],
        "product": ["Laptop", "Smartphone", "Tablet"],
        "date_of_sale": ["2023-01-15", "2023-03-05", "2023-02-20"],
    }
)

# Salesperson peoples
salesperson_peoples = pd.DataFrame(
    {
        "salesperson_id": [1, 2, 3, 5, 8],
        "name": ["Alice", "Bob", "Charlie", "Diana", "Eve"],
        "age": [28, 45, 32, 55, 40],
        "gender": ["Female", "Male", "Male", "Female", "Female"],
    }
)

# Total sales data
total_sales = pd.DataFrame(
    {
        "product": [
            "Laptop",
            "Desktop",
            "Tablet",
            "Smartphone",
            "Smartwatch",
            "Headphones",
            "Monitor",
            "Keyboard",
            "Mouse",
            "Printer",
        ],
        "total_units_sold": [9751, 136, 8285, 2478, 3642, 5231, 1892, 4267, 3891, 982],
    }
)

# Product feedback data
product_feedback = pd.DataFrame(
    {
        "product": [
            "Laptop",
            "Desktop",
            "Tablet",
            "Smartphone",
            "Smartwatch",
            "Headphones",
            "Monitor",
            "Gaming Console",
            "Camera",
            "Speaker",
        ],
        "n_positive_reviews": [1938, 128, 842, 1567, 723, 956, 445, 582, 234, 678],
        "n_negative_reviews": [42, 30, 56, 89, 34, 28, 15, 11, 8, 25],
    }
)

# Sales incidence data
sales = pd.DataFrame(
    {
        "year": [2010, 2011, 2014, 2016, 2017],
        "sales_count": [69890, 66507, 59831, 58704, 59151],
    }
)

# Customer complaints data
customer_complaints = pd.DataFrame(
    {
        "year": [2011, 2013, 2015, 2016, 2019],
        "complaints_count": [1292, 1100, 1011, 940, 895],
    }
)


employees = pd.DataFrame(
    {"employee_id": [1, 2, 3], "name": ["John", "Joy", "Khan"], "age": [32, 28, 40]}
)

training_sessions = pd.DataFrame(
    {
        "employee_id": [1, 2, 3],
        "training_date": ["2023-01-20", "2023-02-20", "2023-05-15"],
    }
)

customer_details = pd.DataFrame(
    {
        "id_number": ["A001", "B002", "C003"],
        "full_name": ["Alice", "Bob", "Charlie"],
        "address": ["123 Elm St", "456 Maple Dr", "789 Oak Blvd"],
    }
)

# Order Records
order_records = pd.DataFrame(
    {
        "customer_code": ["A001", "B002", "C003"],
        "product_type": ["Electronics", "Books", "Clothing"],
        "order_date": ["2022-05-10", "2023-09-01", "2021-12-15"],
    }
)
```

## Why do we need joins? 

```{python}
 people
```


```{python}
test_info
```

### merging the two df with the pd.concat()


```{python}
pd.concat([people, test_info], axis = 1)

## this will paste the two dfs together and will create duplicate column names if the names are the same in the two dfs. 
```


```{python}
test_info_disordered

pd.concat([people, test_info_disordered], axis = 1)

# if the similar names are not in the same row number/posion in the df, concat will just paste the two df without considering the order of the data to be merged. 

```


```{python}
test_info_multiple

pd.concat([people, test_info_multiple], axis = 1)

# since the number of rows are not the same in the 2 dfs and concat is a naive joining ftn, the merging pattern will not be considered and the extra row(s) will always be unmatched. 
```

## Executing joins with pd.merge.


```{python}
pd.merge(people, test_info)
```


```{python}

pd.merge(people, test_info_disordered)
```


```{python}
pd.merge(people, test_info_multiple)
```

## pd.merge() syntax 


```{python}

# the left and right arguments 
pd.merge(left = people, right = test_info)

# OR 

pd.merge(people, test_info)
```


```{python}
# on argument: defines the key(variable found in both dataframes) on which to map the joint on. 

pd.merge(
    people,
    test_info, 
    on = "name"
    )

# The ON argument is optional as long as the key has the same names in both datasets. 

```


```{python}
# what happens when the keys have different names in the 2 dfs: 
test_info_different_name

#pd.merge(people, test_info_different_name, on = "name")

# Solution is 

pd.merge(
    people,
    test_info_different_name,
    left_on = "name", 
    right_on = "first_name")

# both key names will be kept in the merged dataset. 
```

# Practice Q1: Join Employees and Training Sessions
Consider the two datasets below, one with employee details and the other with training session dates for these employees.

```{python}
employees
```

```{python}
training_sessions
```


```{python}
#merging the two dfs: 

pd.merge(
    employees, 
    training_sessions, 
    on = "employee_id"
)
```

# Practice Q2: Join with `on` Argument
Two datasets are shown below, one with customer details and the other with order records for those customers.

```{python}
customer_details
```


```{python}
order_records
```


```{python}
# merging the 2 dfs on id_number and customer_code: 

pd.merge(
    customer_details,
    order_records,
    left_on = "id_number",
    right_on = "customer_code"
)
```

# Types of joins: 

## Left


```{python}
people
```


```{python}
test_info_xavier
```


```{python}
pd.merge(
    people, 
    test_info_xavier,
    how = "left"
)
```


```{python}
pd.merge(
    test_info_xavier,
     people, 
    how = "left"
)
```

# Practice Q3: Left Join Students and Exam Dates
Consider the two datasets below, one with student details and the other with exam dates for some of these students.


```{python}
students
```

```{python}
exam_dates
```


```{python}
#joining using the left join on student_id: 
pd.merge(
    students, 
    exam_dates,
    on = "student_id", 
    how = "left"
)
```

## Analysing African TB Incidence and Health Expenditure. 


```{python}
tb_2019_africa
```


```{python}
health_exp_2019
```


```{python}
# left join with tb dataset as the primary dataset: 

pd.merge(
    tb_2019_africa,
    health_exp_2019,
    on = "country", 
    how = "left"
)
```

# Practice Q4: Left Join TB Cases and Continents
The first, tb_cases_children, contains the number of TB cases in under 15s in 2012, by country:

```{python}
tb_cases_children
```

```{python}
country_continents
```


```{python}
#merging the 2 datasets using the left join with the tb dataset as the prime ds and also using the left_on and right_on: 

pd.merge(
    tb_cases_children,
    country_continents,
    left_on = "country", 
    right_on = "country.name.en", 
    how = "left"
)
```

# right join 


```{python}
pd.merge(
    people,
    test_info_xavier,
    on = "name",
    how = "right"
)
```

# inner join: 

```{python}

pd.merge(
    people,
    test_info_xavier,
    on = "name",
    how = "inner"
)

```

# Practice Q5: Inner Join Products
The following data is on product sales and customer feedback in 2019.


```{python}
total_sales
```


```{python}
product_feedback
```


```{python}
# merging the sale and feedback datasets using the inner join: 

pd.merge(
    total_sales,
    product_feedback,
    on = "product", 
    how = "inner"
)
```

# Outer join (full-join)


```{python}
pd.merge(
    people,
    test_info_xavier,
    on = "name",
    how = "outer"
)
```

# Practice Q6: Join Sales Data
The following dataframes contain global sales and global customer complaints from various years.


```{python}
sales
```


```{python}
customer_complaints
```


```{python}
# full/outer join using the two datasets joining on yr:

pd.merge(sales, customer_complaints, on="year", how="outer")
```